{"componentChunkName":"component---src-pages-search-jsx","path":"/search/","result":{"data":{"allMarkdownRemark":{"nodes":[{"excerpt":"고민 배경 제가 했던 프로젝트에서는 소셜 로그인만 가능하게 두어서 소셜 로그인으로만 회원가입이 가능합니다. 일반 회원가입 로직과는 다르게 OAuth로 최초 로그인시 백엔드 서버에 회원 정보가 없을 때 회원 가입 을 하게 됩니다. OAuth 제공자인 카카오에서 주는 , , ,  로 간편하게 회원가입할 수 있다면 로그인 요청시 바로 회원가입을 진행하면 되지만…","fields":{"slug":"/oauth_user_register/"},"frontmatter":{"date":"January 12, 2024","title":"[OAuth] 소셜 최초 로그인시 회원가입 추가 정보를 받는 로직에 대한 고민","tags":["OAuth","회원가입"]},"rawMarkdownBody":"\n## 고민 배경\n\n제가 했던 프로젝트에서는 소셜 로그인만 가능하게 두어서 소셜 로그인으로만 회원가입이 가능합니다.\n\n일반 회원가입 로직과는 다르게 OAuth로 최초 로그인시 백엔드 서버에 회원 정보가 없을 때 **회원 가입** 을 하게 됩니다.\n\nOAuth 제공자인 카카오에서 주는 `oauthId`, `email`, `nickname`, `profileImageUrl` 로 간편하게 회원가입할 수 있다면 로그인 요청시 바로 회원가입을 진행하면 되지만, 현재 진행하고 있는 프로젝트에서는 회원에 대한 추가적인 정보(`position`, `address`) 를 받아야만 하는 상태입니다.\n\n## 생각해 본 해결 방법\n1. 우선 OAuth 제공자에서 주는 정보로만 회원가입을 진행하고 정보 미입력 상태를 추가한다. 그리고 추가 입력이 필요한 `position`과 `address`를 이용하는 서비스에 접근할 때 정보 입력 상태를 확인하고 미입력이면 추가 정보를 입력받고 입력 상태면 서비스에 접근을 허용시킨다.\n\n2. 클라이언트는 소셜 최초 로그인 후 추가 입력을 받는 회원가입 페이지를 접근할 때 짧은 유효기간을 갖는 RegisterToken을 발급받는다.\n\n우선 떠오르는 방법은 위 두 가지였는데 첫번째 방법이 흔하게 사용되는 것 같았습니다. \n\n하지만, 추가 입력이 필요한 `position`과 `address`를 이용하는 서비스에 접근할 때 회원 테이블의 정보 상태 컬럼에서 요청한 회원이 정보가 미입력 상태인지 확인해보는 작업이 필요한데 저는 관련된 기능을 요청할 때마다 DB에 접근하여 I/O 작업을 해야한다는 점이 성능상 좋지 못하다고 생각했습니다. CustomAnnotation과 ArgumentResolver로 관련 기능을 구현할 수 있을 것 같지만 성능을 고려하여 두번째 방법을 고려해보기 시작했습니다.\n\n두번째 해결 방법은 소셜 최초 로그인 후 추가 입력을 받는 회원가입 페이지를 접근할텐데 이때 백엔드 서버에서 짧은 유효기간을 갖는 RegisterToken을 발급받는 것 입니다. 첫번째 방법과는 달리 회원가입 API에서만 검증하면 되기도하며 따로 DB에 접근하지 않고 RegisterToken만 검증하면 된다고 생각해서 더 효율적이라고 생각했습니다.\n\n## 해결\n### **RegisterToken 구현 흐름**\n![image](registertoken.png)\n1. 최초로 소셜 로그인을 완료하면 OAuth 제공자를 통해 백엔드 서버에서 `oauthId`, `email`, `nickname`, `profileImageUrl`를 받는다.\n\n2. `oauthId`로 회원 테이블에 사용자가 존재하는지 확인한다.<br>\n    (위 그림에서는 이메일로 확인한다고 나와있는데 실제로 OAuth를 이용할 때는 OAuth에서 제공하는 ID로 사용자를 구분해야 함.)\n    ![image](kakao.png)\n\n3. 회원 테이블에 사용자가 존재하지 않는 경우 RegisterToken이라는 JWT Token을 만든다.\n  - 이때 RegisterToken 즉 JWT 토큰에 들어가는 Subject는 OAuth 제공자와 OAuthId 값을 합쳐서 만들며 만료 시간은 10분으로 한다.\n    ``` java\n    final AuthTokens registerToken = jwtProvider.createRegisterToken(oauthProviderName + oauthMember.getOauthId());\n    ```\n  - OAuth 제공자와 OAuthId를 합치는 이유는 카카오와 네이버의 OAuthId가 동일할 수 있는 것 처럼 OAuth 제공자들의 id의 겹치는 현상을 방지하기 위해\n4. 만든 토큰을 클라이언트에게 보내주면서 OAuth를 통해 받은 `oauthId`, `email`, `nickname`, `profileImageUrl`, `oauthProvider`를 같이 넘겨준다.\n   - 같이 넘겨주는 이유는 회원가입시 필요한 정보이기 때문에\n5. 클라이언트에서는 회원에게 추가 정보를 입력 받고 회원가입 API 요청을 할 때 헤더에 RegisterToken을 추가하여 보낸다.\n6. 백엔드 서버에서는 해당 요청을 받아 RegisterToken이 정상적인 토큰인지 검증한다.\n7. 정상적인 토큰이라면 Controller에서 사용자가 회원가입시 보낸 oauthId와 oauthProvider를 조합하여 토큰에서 나온 subject값이 일치하는지 확인한다.\n   ``` java\n    @PostMapping\n    public ResponseEntity<AuthenticatedMemberResponse> createMember(\n            @SignUp final String oauthSubject,\n            @Valid @RequestBody final MemberCreateRequest memberCreateRequest,\n            final HttpServletResponse httpServletResponse\n    ) {\n        final String oauthProviderName = memberCreateRequest.getOauthProvider().name();\n        final String requestOauthSubject = oauthProviderName + memberCreateRequest.getOauthId();\n\n        if (!oauthSubject.equals(requestOauthSubject)) {\n            throw new MemberException(MEMBER_SIGNUP_OAUTH_SUBJECT_INVALID, requestOauthSubject);\n        }\n\n        ... 생략\n    }\n   ```\n   - 위와 같은 검증을 다시 하는 이유는 혹시나 누가 토큰만 탈취했을 때 회원가입 API를 요청을 보내면 토큰만 있어도 회원가입을 할 수 있기 때문(안전 장치)\n8. 정상적으로 회원가입을 진행한다.\n\n## 마치며\n위 로직은 흔하지 않은 방식이겠지만 로그인 과정에서의 효율성과 상황 등 여러가지에 대해 직접 생각해보며 제가 생각한 것을 그대로 구현해내면서 많이 배웠던 것 같습니다.\n아! 그리고 이 글을 작성할 때 이미 두번째 방법으로 구현한 상태인데 첫번째 방법에 대해 글을 작성하다보니 첫번째 방법으로 구현해도 좋을 것 같다고 생각이 들었습니다.\n처음에는 매 요청시마다 무조건 DB에 접근하여 확인해보아야할 것 같다고 생각했었는데 우선 회원가입시키고 로그인시 토큰을 만들 때 회원 정보 입력 상태를 토큰에 같이 넣고 그것을 ArgumentResolver로 처리하면 될 것 같네요. 역시,, 개발은 넓은 시각으로 많이 생각해보아야하는 것 같습니다. 그래도 제 생각을 담아내서 개발한다는 것은 참 즐거운 일인 것 같아요! 😆"},{"excerpt":"공연 예매시 발생하는 좌석 동시성 문제 해결하기 저희 프로젝트는 인터파크와 같은 티켓 예매 사이트로써 많은 사용자가 동시에 사이트에 접근하여 예매하는 경우가 많습니다. 동시에 예매하는 것이 어떠한 문제를 일으키는 것일까요? 1. 문제 이 티켓은 오늘 18시부터 예매할 수 있고 따로 좌석이 없고 스탠딩으로 이루어져 있어 먼저 구매한 순으로 앞자리부터 이용할…","fields":{"slug":"/concurrent/"},"frontmatter":{"date":"September 26, 2023","title":"공연 예매시 발생하는 좌석 동시성 문제 해결하기","tags":["트러블 슈팅"]},"rawMarkdownBody":"\n\n# **공연 예매시 발생하는 좌석 동시성 문제 해결하기**\n\n저희 프로젝트는 인터파크와 같은 티켓 예매 사이트로써 많은 사용자가 동시에 사이트에 접근하여 예매하는 경우가 많습니다. **동시에 예매하는 것이 어떠한 문제를 일으키는 것일까요?**\n\n## 1. 문제\n\n<div style=\"background-color: #f1f1ef; padding: 10px 20px; color:black; margin-bottom:20px;\">\n<br>\n❗ <b>예를 들어 봅시다.</b><br><br>\n<b>10월 18일 18시에 고척 돔에서 방탄소년단의 공연</b>이 있다고 가정해봅시다.\n\n이 티켓은 오늘 18시부터 예매할 수 있고 따로 좌석이 없고 스탠딩으로 이루어져 있어 먼저 구매한 순으로 앞자리부터 이용할 수 있다고 합니다. 그럼 오늘 18시에 열리는 사이트는 굉장히 많은 사람이 한꺼번에 몰려서 예매를 시도하겠죠?\n\n이것을 개발 관점으로 다시 보게 되면 18시에 사용자들이 동시에 예매를 하는 경우 해당하는 공연에 대한 **좌석 수에 동시에 접근하여 좌석 수를 감소시킬 수 있다는 점**입니다. **좌석 수라는 공유된 자원에 여러 명이 접근하여 읽거나 쓰려고 하는 Race Condition**이 발생할 수 있는 것이죠.\n</div>\n\n위에서 든 예처럼 저희 프로젝트에서는 **Race Condition**이 일어날 수 가능성이 아주 큽니다.\n\n그럼 성능 테스트 도구를 이용해서 가상으로 1**000명의 사용자가 있다고 생각하고 동시에 예매 API를 호출**해보도록 하겠습니다.\n\n**[1000명의 동시 예매 테스트 전 좌석 수]**\n<img src='1.png' align='left'/>\n\n**[1000명의 동시 예매 테스트 후 좌석 수]**\n![Untitled](2.png)\n\n**[테스트 결과]**\n![Untitled](3.png)\n\n위 리포트에서 **성공한 테스트는 1,000건이라고 나오지만** 실제로 데이터베이스에서 줄어든 좌석 수의 차이를 보게되면 **141,921개에서 141,821개**로 **100개**만 줄어든 것을 확인할 수 있습니다.\n\n간단하게 말하면 **1,000명의 사용자가 동시에 예매**를 시도했는데 해당 공연의 좌석 수가 **1,000개가 줄어들어야 하는데 100개**만 줄어든 것이죠.\n\n## 2. 왜 이런일이 발생되는 걸까?\n\n**원인**\n\n![Untitled](4.jpeg)\n\n1. 클라이언트 1과 클라이언트 2에서 동시에 schedule_id가 1인 레코드를 읽습니다.\n2. 두 클라이언트 모두 좌석 수가 595개인 레코드를 읽어왔고 각 클라이언트 객체에서 -1을 적용하여 **594**개로 변경합니다.\n3. 변경 후 schedule_id가 1인 레코드의 좌석 수를 594개로 변경하는 UPDATE 쿼리를 날립니다.\n\n위 로직을 보면 두 개의 트랜잭션이 하나의 데이터를 동시에 갱신하는 문제를 원인으로 볼 수 있으며 위와 같은 문제를 **갱신 손실이라고 부릅니다.** \n\n위와 같은 문제를 해결하는 방법으로 여러 가지가 있는데 아래에서 알아보도록 하겠습니다.\n\n## 3. 해결 방법\n\n제 생각에 해결할 수 있는 방법은 굉장히 다양하고 많을 것 같습니다. 예를 들어 단일 스레드의 메시지 큐를 활용하여 대기 순서대로 처리하는 방식이 있을 것 같고 DB에 Lock을 걸어서 레코드를 순차적으로 업데이트 시킬 수 있는 방법이 있을 것 같은데 이 글에서는 락을 이용하여 동시성 문제를 해결해보고자 합니다.\n\n<div style=\"background-color: #f1f1ef; padding: 10px 20px; color:black; margin-bottom:20px;\">\n❗ <b>UPDATE schedule SET seats_count = seats_count -1 WHERE schedule_id = 1</b> 과 같은 방식으로 처리하게되면 **UPDATE시 배타 락이 걸려서 순차적으로 좌석 수를 줄일 수 있습니다만** **비지니스 로직 상에서 발생하는 예외를 처리할 수 없습니다**. 예를 들어 좌석 수가 100개 중 0개가 남았는데 좌석 수를 불러와서 검증하지 않고 바로 업데이트하면 좌석 수가 -1로 업데이트가 될 수 있는 상황이 발생할 수도 있고, 예매 취소시 좌석 수가 증가해야하는데 해당 공연 좌석수의 최대값 보다 큰 값으로 업데이트될 수 있는 문제도 생길 수 있습니다.\n\n</div>\n\n### 3.1 낙관적 락\n\n첫 번째는 낙관적 락입니다.\n\n낙관적 락은 **충돌이 거의 발생하지 않을 것이라고 가정하고, 충돌이 발생한 경우에 대비하는 방식**입니다. DB에 직접적으로 Lock을 걸지 않고, 충돌(동시성) 문제가 발생하면 그때 처리하는 방식으로도 볼 수 있습니다. 간단하게 말하면 **수정할 때 수정했다고 명시**하여 다른 트랜잭션이 동일한 조건으로 값을 수정할 수 없게 막는 것입니다.\n\n**동작 방식**\n\n![낙관적 락.jpg](5.jpg)\n\n1. 클라이언트 1과 클라이언트 2가 동시에 schedule_id가 1인 레코드를 읽어옵니다.\n2. 클라이언트 1이 미세하지만, 더 빨리 좌석 수를 -1하고 UPDATE 시키며 테이블에 있는 version 정보를 +1 하고 커밋합니다.\n3. 클라이언트 2도 처음에 읽었던 값을 기반으로 좌석 수를 -1하고 UPDATE를 시도합니다.\n4. 하지만 클라이언트 2가 UPDATE를 시도할 때 이미 클라이언트 1이 UPDATE를 하면서 version 정보를 +1 했기 때문에 UPDATE에 실패하게 되고 예외를 발생시킵니다.\n5. 예외가 발생하면 해당 서비스를 호출한 퍼사드 클래스에서 다시 조회 후 업데이트 로직을 반복시킵니다. \n\n구현 **코드**\n\n**ReservationService.java**\n\n```java\n@Transactional\npublic ReservationIdResponse createReservation(ReservationCreateRequest reservationCreateRequest) {\n    Reservation reservation = reservationCreateRequest.toEntity();\n    decreaseSeatsCount(reservation);\n    Long reservationId = reservationRepository.save(reservation);\n\n    return ReservationIdResponse.from(reservationId);\n}\n\nprivate void decreaseSeatsCount(Reservation reservation) {\n    Schedule schedule = scheduleService.findByScheduleId(reservation.getScheduleId());\n    schedule.decreaseSeatsCount();\n    int count = scheduleService.updateSeatsCountById(schedule.getScheduleId(), schedule.getSeatsCount(),\n        schedule.getVersion());\n\n    // 좌석 수 업데이트를 실패할 경우 예외를 발생 시킴\n    if (count == 0) {\n        throw new CommonException(COMMON_LOCK_ACQUISITION_FAILED, count);\n    }\n}\n```\n\n**ReservationOptimisticFacade.java**\n\n```java\n@Slf4j\n@Component\n@RequiredArgsConstructor\npublic class ReservationOptimisticFacade {\n\n    private final ReservationService reservationService;\n\n    public ReservationIdResponse createReservation(ReservationCreateRequest reservationCreateRequest) {\n        ReservationIdResponse reservationIdResponse;\n\n\t\t\t\t// 정상적으로 좌석 수를 업데이트할 때까지 반복\n        while (true) {\n            try {\n                reservationIdResponse = reservationService.createReservation(reservationCreateRequest);\n\n                break;\n            } catch (CommonException e) { // 좌석 수 업데이트 중 예외가 발생되면 로그를 찍고 다시 메서드 호출\n                log.info(e.getMessage());\n            }\n        }\n\n        return reservationIdResponse;\n    }\n}\n```\n\n위와 같이 퍼사드 패턴을 이용하는 경우 ReservationService에 있는 createReservtaion 메서드를 모두 묶어야 하기 때문에 createReservation의 메서드에 많은 로직이 생기면 실패할 때마다 그 많은 로직을 매번 수행해야 하는 부담이 생길 수 있다고 생각이 들었습니다. 그래서 **ReservationService 안에서 좌석 수만 감소시키는 로직에만 낙관적 락을 적용해보았으나 MySQL의 Repeatable Read 격리 수준으로 인해 해당 방법으로는 구현할 수 없다는 것으로 판단을 내렸습니다.** 앞서 말씀드린 트러블 슈팅은 아래 트러블 슈팅 1번을 참고 부탁드립니다.\n\n### 3.2 비관적 락\n\n비관적 락은 충돌이 발생할 확률이 높다고 가정하여, 실제로 데이터에 액세스 하기 전에 먼저 락을 걸어 충돌을 예방하는 방식입니다. **데이터베이스에 직접 락을 거는 방식**으로 동시성 이슈 해결에는 확실하나 락으로 인한 성능 저하와 데드락(교착 상태)이 발생할 수 있습니다.\n\n**동작 방식**\n\n![Untitled](6.jpeg)\n\n1. 클라이언트 1이 클라이언트 2보다 먼저 **SELECT … FOR UPDATE**로 배타 락을 획득하며 schedule_id가 1인 레코드를 읽어옵니다.(실제로 동시성이라해서 동시에 접근하는 것이 아닙니다!!)\n2. 클라이언트 2는 **SELECT … FOR UPDATE**로 배타 락을 획득하려 했지만 이미 락이 걸려있어 **대기 상태**에 진입하게 됩니다.\n3. 클라이언트 1은 좌석 수를 -1 시키고 UPDATE 시킨 후 COMMIT 하여 락을 반환시킵니다.\n4. 대기하고 있던 클라이언트 2가 다시 **SELECT … FOR UPDATE**로 배타 락을 획득하며 schedule_id가 1인 레코드를 읽어옵니다.\n5. 클라이언트 2는 좌석 수를 -1 시키고 UPDATE 시킨 후 COMMIT 하여 락을 반환시킵니다.\n\n구현 **코드**\n\n**ReservationService.java**\n\n```java\n@Transactional\npublic ReservationIdResponse createReservation(ReservationCreateRequest reservationCreateRequest) {\n    Reservation reservation = reservationCreateRequest.toEntity();\n    decreaseSeatsCount(reservation);\n    Long reservationId = reservationRepository.save(reservation);\n\n    return ReservationIdResponse.from(reservationId);\n }\n\nprivate void decreaseSeatsCount(Reservation reservation) {\n    Schedule schedule = scheduleService.**findByIdWithPessimisticLock**(reservation.getScheduleId());\n    schedule.decreaseSeatsCount();\n    scheduleService.updateSeatsCountById(schedule.getScheduleId(), schedule.getSeatsCount());\n}\n```\n\n**ScheduleMapper.xml**\n\n```xml\n<select id=\"findByScheduleIdWithPerssimisticLock\" resultType=\"Schedule\">\n        SELECT schedule_id,\n               start_datetime,\n               sequence,\n               seats_count,\n               performance_id,\n               created_datetime,\n               updated_datetime\n        FROM schedule\n        WHERE schedule_id = #{scheduleId}\n        FOR UPDATE;\n</select>\n```\n\n비관적 락은 생각보다 간단합니다. **FOR UPDATE** 특성상 트랜잭션 안에서도 **최신화 된 데이터를 읽어올 수 있기 때문에** 별도로 퍼사드 클래스로 빼지 않아도 되고 단순히 조회 쿼리에 **FOR UPDATE**만 붙이면 락을 적용할 수 있게 됩니다.\n\n**[RealMySQL 5.4.3 Repeatable Read에서]**\n\n- Repeatable Read에서는 **PHANTOM READ 현상이 기본적으로 안 일어난다고 하지만, SELECT … FOR UPDATE와 SELECT … FOR SHARE의 경우 해당 현상이 일어날 수 있습니다.**\n- **PHANTOM READ**: 다른 트랜잭션에서 수행한 변경 작업에 의해 레코드가 보였다 안보였다 하는 현상\n    \n    ![Untitled](7.png)\n    \n\n### 3.3 Redis를 활용한 분산 락(Pub - Sub)\n\n분산 락은 분산된 환경에서 많이 사용하는데요. 예를 들어, 단일 DB가 아닌 스케일 아웃 하여 사용할 때 DB로 가는 요청을 Redis를 이용하여 단일 진입점으로 만들고 순차적으로 요청을 처리할 수 있게 만들 수 있습니다. 저는 스케일 아웃을 하지는 못했지만 스케일 아웃을 한다는 가정을 하고 단일 DB에서 Redis를 이용해서 분산 락을 구현해보았습니다.\n\n**동작 방식**\n\n![분산 락.jpg](8.jpg)\n\n1. 클라이언트 1에서 Redis에 먼저 스케줄 ID를 기반으로 락 획득을 요청합니다. (schedule_id인 1이 락으로 잡혀있지 않기 때문에 획득합니다)\n2. 클라이언트 2에서도 그 뒤에 바로 Redis에 스케줄 ID를 기반으로 락 획득을 요청합니다.\n3. 클라이언트 1에서 이미 schedule_id인 1로 Lock을 걸어두었기 때문에 설정해둔 값인 10초 동안 대기상태에 진입하게 됩니다.\n4. 이제 클라이언트 1은 락을 획득 했기 때문에 다음 비지니스 로직인 seats_count를 -1하고 업데이트 쿼리를 날린 후 커밋합니다.\n5. 트랜잭션이 종료되면 unlock() 메서드를 통해 락을 해제하고 Redis에서는 구독자(subscriber)에게 unlock이 되었다고 전달합니다.\n6. 구독자(subscriber)는 unlock 되었다는 메시지를 받고 다시 Redis에 lock을 요청하여 락을 획득합니다.\n7. 락을 획득하면 비지니스 로직인 seats_count를 -1하고 업데이트 쿼리를 날려 커밋합니다.\n\n구현 **코드**\n\n**ReservationService.java**\n\n```java\n@Transactional\npublic ReservationIdResponse createReservation(ReservationCreateRequest reservationCreateRequest) {\n    Reservation reservation = reservationCreateRequest.toEntity();\n    decreaseSeatsCount(reservation);\n    Long reservationId = reservationRepository.save(reservation);\n\n    return ReservationIdResponse.from(reservationId);\n }\n\nprivate void decreaseSeatsCount(Reservation reservation) {\n    Schedule schedule = scheduleService.findByIdWithPessimisticLock(reservation.getScheduleId());\n    schedule.decreaseSeatsCount();\n    scheduleService.updateSeatsCountById(schedule.getScheduleId(), schedule.getSeatsCount());\n}\n```\n\n**ReservationRedissonFacade.java**\n\n```java\n@Slf4j\n@Component\n@RequiredArgsConstructor\npublic class ReservationRedissonFacade {\n\n    private final RedissonClient redissonClient;\n    private final ReservationService reservationService;\n\n    private static final String REDISSON_LOCK_PREFIX = \"LOCK:\";\n\n    public ReservationIdResponse createReservation(ReservationCreateRequest reservationCreateRequest) {\n\n        String key = REDISSON_LOCK_PREFIX + reservationCreateRequest.getScheduleId();\n        RLock lock = redissonClient.getLock(key);\n\n        boolean isLocked = false;\n        ReservationIdResponse reservationIdResponse = null;\n\n        try {\n\t\t\t\t\t\t// Lock 시도(대기 시간(초), Lock 유효시간, 단위 지정)\n            isLocked = lock.tryLock(10, 1, TimeUnit.SECONDS);\n\n            if (!isLocked) {\n                throw new CommonException(COMMON_LOCK_ACQUISITION_FAILED, reservationCreateRequest.toString());\n            }\n\n\t\t\t\t\t\t// Lock 획득시 로직 수행\n            reservationIdResponse = reservationService.createReservation(reservationCreateRequest);\n        } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n        } finally {\n            try {\n                lock.unlock();\n            } catch (IllegalMonitorStateException e) {\n                log.info(\"Redisson Lock Already UnLock\");\n            }\n        }\n\n        return reservationIdResponse;\n    }\n}\n```\n\n위와 같이 Redis를 이용하면 Redis라는 서버가 별도로 있기 때문에 DB로 진입하기 전 미리 Redis를 통해 락을 획득하여 처리할 수 있습니다. 그리고 DB뿐만 아니라 애플리케이션 서버가 스케일 아웃되더라도 동일한 Redis를 바라보고 있기 때문에 스케일 아웃에 대비할 수 있습니다. \n\n## 4. Ngrinder를 활용한 락 종류 별 성능 테스트\n\nNgrinder를 활용하여 **동시성 문제 테스트**와 **처리 속도에 대한 성능 테스트**를 해보고자 합니다.\n\n공통된 테스트 환경으로 로컬에서 SpringBoot 웹서버를 띄우고 외부 네트워크에 있는 DB나 Redis를 연결해서 사용하는 형태로 Ngrinder는 로컬에서 작동시켜 테스트 시 로컬에 있는 웹서버에 요청하게 됩니다.\n\n사용자의 수는 1000명이며 **1000명의 사용자가 동시에 예매를 진행하여 1000개의 좌석을 감소시킨다에 초점을 맞춘 테스트**입니다.\n\n**공통 테스트 환경**\n\n- **테스트 PC**: M1 MacBook Pro(CPU 8 Core, RAM 8GB)\n- **NAS 서버**: Synology Nas(CPU 4 Core, RAM 10GB)\n\n### 4.1 낙관적 락\n\n**테스트 환경**\n\n![Untitled](9.png)\n\n**테스트 결과**\n\n**[Ngrinder 리포트]**\n\n![스크린샷 2023-09-24 오전 1.38.09.png](10.png)\n\n**[동시성 테스트 전 좌석 수]**\n\n![Untitled](11.png)\n\n**[동시성 테스트 후 좌석 수]**\n\n![Untitled](12.png)\n\n**[요약]**\n\n![Untitled](34.png)\n\n### 4.2 비관적 락\n\n**테스트 환경**\n\n![Untitled](13.png)\n\n**테스트 결과**\n\n**[Ngrinder 리포트]**\n\n![스크린샷 2023-09-24 오전 1.48.47.png](14.png)\n\n**[동시성 처리 전 좌석 수]**\n\n![Untitled](15.png)\n\n**[동시성 처리 후 좌석 수]**\n\n![Untitled](16.png)\n\n**[요약]**\n\n<img src=\"17.png\" width=\"50\" height=\"100\">\n\n\n### 4.3 Redis를 활용한 분산 락\n\n**테스트 환경**\n\n![Untitled](18.png)\n\n**테스트 결과**\n\n**[Ngrinder 리포트]**\n\n![Untitled](19.png)\n\n**[동시성 테스트 전 좌석 수]**\n\n![Untitled](20.png)\n\n**[동시성 테스트 후 좌석 수]**\n\n![Untitled](21.png)\n\n**[요약]**\n\n![Untitled](22.png)\n\n**[Request 실패 이유]**\n\n![Untitled](23.png)\n\nRedisson을 이용하면 **Lock 획득을 위한 대기 시간을 얼마나 가질지** 정할 수 있는데, **기본값으로 30초를 설정**하여 30초 이후에는 예외를 발생시켜 예매할 수 없도록 설정해두었기 때문에 **30초 이후부터는 에러**가 발생됩니다.\n\n### 4.4 락 종류 별 비교\n\n![Untitled](24.png)\n\n사실 위 결과는 네트워크 환경, 서버의 성능 등에 따라 매번 달라지기 때문에 **유의미**하다고 **볼 수는 없을 것 같습니다.** 락을 건다는 것은 어떠한 동시성 문제를 처리하기 위함인데 물론 속도 면에 있어서도 중요하지 않다고 딱 말할 수는 없지만, 그것보다 더 중요한 것은 **어떤 상황에서 어떤 잠금 메커니즘이 가장 적합한지 판단**하는 것이라고 생각합니다. \n\n예를 들어, 동시 업데이트 충돌 가능성이 낮으면 낙관적 락, 충돌 가능성이 크거나 스케일 아웃이 필요한 경우 비관적 락을 생각해보고, 스케일 아웃, 분산 환경에서 일관된 데이터 접근이 필요한 경우 또는 락 획득에 대한 대기 시간 제한을 걸어 다른 로직을 실행해야 하면 Redis를 활용해볼 수 있을 것 같습니다. \n\n그리고 위 결과는 **네트워크 환경, 서버의 성능 등 여러 가지를 고려해서 산정해야 하기 때문에 정확한 것은 아니지만** 충돌이 많이 일어날수록 계속 요청을 해야 하는 **낙관적 락이 확실히 더 오래 걸리고, TPS 처리량이 낮은 것**을 볼 수 있습니다. 비관적 락과 Redis 분산 락의 경우 분산 락이 Redis로 처리하여 더 빠를 것으로 예상하였지만 큰 차이를 보이지 못했습니다.\n\n### 4.5 결론\n\n위 의견들을 종합하고 경험해보았을 때 저는 현재 프로젝트에서 **비관적 락**이 제일 알맞다고 생각합니다. \n\n우선 분산된 환경은 아니므로 굳이 Redis를 도입해서 처리해야 할 필요성은 느끼지 못했고 단일 서버일 때 낙관적 락과 비관적 락을 생각해볼 수 있었는데 티켓팅 특성상 한꺼번에 예매를 하기 위해 몰리는 트래픽이 많아 낙관적 락을 사용하면 계속 되는 요청으로 많은 부하가 발생 될 수 있다고 생각이 들었습니다. \n\n## 5. 트러블 슈팅\n\n### 5.1 트랜잭션 안에 좌석 수를 감소시키는 로직에만 낙관적 락 적용해보기\n\n**ReservationService.java**\n\n![스크린샷 2023-09-17 오후 9.15.47.png](25.png)\n\n우선 위와 같이 퍼사드 클래스로 바깥쪽에 낙관적 락 로직을 적용하는 것이 아닌 서비스 메서드 트랜잭션안에 적용하는 방법으로 진행해보겠습니다. 이렇게 100명의 클라이언트를 만들어 예매를 시도하면 H2 데이터베이스에서는 잘 됐었지만 **MySQL에서는 첫번째 업데이트만 성공 후 나머지 99명의 요청은 계속 업데이트 실패로 0**이 나오고 있었습니다. 무엇이 문제였을까요?\n\n**REPEATABLE READ로 동작할 때(MySQL)**\n\n**동작**\n\n![Untitled](26.png)\n\n동일한 쓰레드에서 schedule을 계속 최신으로 받아서 update시키고 있는데 업데이트 결과가 0으로 나왔습니다.\n\n**결과**\n\n![Untitled](27.png)\n\n첫번째 사용자의 업데이트만 반영된 이후 **나머지 99명의 업데이트는 반영되지 못했습니다. 이것은 MySQL 격리 수준인 REPEATABLE READ 때문인데요. 아래 그림을 통해 이해하실 수 있습니다.**\n\n**REPEATABLE READ 동작 방식**\n\n![Untitled](28.png)\n\n1. REPEATABLE READ는 트랜잭션이 끝나기 전까지는 처음 읽었던 그 값을 유지해서 읽도록 되어있습니다.(다른 트랜잭션에서 수정한 값을 읽는게 아닌 **언두 로그를 읽어서**)\n2. 그래서 첫번째 업데이트 이후 다른 99명의 사용자들도 이미 트랜잭션이 시작된 이후여서 첫번째 업데이트(커밋) 후의 데이터를 읽어오지 않고 언두로그에 있는 데이터를 계속 읽다보니 업데이트를 실패할 수 밖에 없는 것이었습니다.\n\n**READ COMMITTED로 동작할 때(H2, Oracle)**\n\n\n\n- H2 데이터베이스의 기본 설정 값은 **READ COMMITTED**\n\n![Advanced](29.png)\n\n- 테스트를 위해 my.cnf 파일을 수정하여 READ-COMMITTED로 변경 후 MYSQL서버 재실행\n\n![스크린샷 2023-09-17 오후 9.21.41.png](30.png)    \n\n**동작**\n\n![Untitled](31.png)\n\n실패했던 스레드가 다시 요청시 성공하는 것을 볼 수 있습니다.\n\n**결과**\n\n![Untitled](32.png)\n\n정상적으로 100명이 감소되는 것을 확인해볼 수 있습니다.\n\n**READ COMMITTED 동작 방식**\n\n![Untitled](33.jpg)\n\n**내 생각**\n\n위와 같은 문제로 REPEATABLE READ 격리 수준에서는 낙관적 락을 적용할 때 트랜잭션 밖에서 퍼사드 클래스를 이용해서 낙관적 락을 적용해야된다고 판단이 내려졌습니다. 하지만 분명 서비스 메서드 안에 로직이 방대해지는 경우 퍼사드 클래스를 이용해서 처리하는 것은 효율적이지 못할 수도 있을 것 같아서 그럴 때는 해당 메서드의 격리수준을 READ COMMITTED로 변경해서 구현해보는 것도 고려해볼 것 같습니다!"},{"excerpt":"❌ 아니! 분명 AWS에 EC2를 생성해서 ssh를 오픈했는데 왜 접속이 안 되나요? ❌ 외부 환경에서 IDC에 있는 회사 서버에 접속이 안 돼요! ❌ 집 로컬 환경에서 서버를 열어두었는데 외부에서 집에 있는 서버가 접속이 안 돼요! 혹시 여러분도 위와 같은 일들을 겪어 보신 적이 있으신가요? 저는 위와 같은 일들을 많이 겪어봤고, 학교를 다니기 전 보안…","fields":{"slug":"/tcpdump/"},"frontmatter":{"date":"August 19, 2023","title":"서버 접속이 안 될 때 해볼 수 있는 tcpdump를 이용한 트러블 슈팅 방법","tags":["트러블 슈팅"]},"rawMarkdownBody":"\n> - ❌ 아니! 분명 AWS에 EC2를 생성해서 ssh를 오픈했는데 왜 접속이 안 되나요?\n> - ❌ 외부 환경에서 IDC에 있는 회사 서버에 접속이 안 돼요!\n> - ❌ 집 로컬 환경에서 서버를 열어두었는데 외부에서 집에 있는 서버가 접속이 안 돼요!\n\n혹시 여러분도 **위와 같은 일들을 겪어 보신 적이 있으신가요?**\n\n저는 위와 같은 일들을 많이 겪어봤고, 학교를 다니기 전 보안 회사에서 **UTM이라는 방화벽 장비를 다루며 고객사에서 위와 같은 문제들로 인해 직접 트러블 슈팅한 경험**이 많았었습니다. \n\n저는 그때마다 가장 먼저 확인해보는 것이 있는데요! 그것은 바로 **네트워크 패킷**입니다. 위에서 말하는 **접속**이라는 것은 결국 `출발지`에서 `목적지`로 접속한다는 것으로 결국 접속할 때는 `출발지`에서 `목적지`로 **접속을 위한 패킷을 보내게 됩니다**. 이것은 단순히 SSH 접속뿐만이 아니라 **HTTP 접속, MySQL의 서비스 포트인 3306 포트를 접속할 때도 적용되며 대다수의 서비스에 적용**된다고 보시면 될 것 같아요.\n\n그럼 **트러블 슈팅하는 방법을 배우기 전에 알아두면 좋은 내용**에 대해서 먼저 간단하게 말씀드리고 넘어가도록 하겠습니다.\n\n### 트러블 슈팅을 위한 배경 지식\n\n#### 기본적인 네트워크 환경\n\n![Alt text](image-2.png)\n\n보통 일반적인 네트워크 환경을 보면 집 PC에서 공유기를 통해 외부 인터넷에 접속하고 목적지인 서버에 접속하는 방식으로 이루어져 있습니다. 외부 인터넷은 **수많은 라우터가 서로 연결되어 있는 형태로 집에 있는 PC와 서버가 연결**될 수 있는 거죠! 그렇다면 서로 어떤 방식으로 통신하는 걸까요?\n\n\n#### IP가 포함된 네트워크 환경\n\n![Alt text](image-3.png)\n서로 통신하기 위해서는 **별도의 주소**를 가지고 있어야 합니다. 저희가 네이버 지도 앱을 켜서 목적지로 갈 때 출발지와 목적지를 입력하듯 네트워크 통신도 마찬가지로 각 장비마다 별도의 고유 주소가 필요하며 출발지 주소에서 목적지 주소를 바라보고 경로를 탐색해서 찾아가게 됩니다. **네트워크에서는 그 고유한 주소를 IP**라고 불러요!\n\n예를 들어 **192.168.0.100**이라는 집 PC에서 **123.122.111.100**이라는 외부 웹서버를 접속한다고 가정해보겠습니다.\n\n> 1. 192.168.0.100인 집 PC에서 웹 브라우저로 123.122.111.100이라는 웹서버에 접속합니다. (실제로는 도메인을 입력하는 경우가 많겠죠? 하지만 도메인도 실제로는 모두 IP로 이루어져 있답니다!)\n> 2. 그럼 이때 192.168.0.100이라는 집 PC(출발지)에서 패킷을 만들어 공유기의 Gateway인 192.168.0.1로 보내게 되고,집 PC IP였던 192.168.0.100을 223.194.166.251이라는 외부 IP로 변환시켜 외부 인터넷으로 전달하게 됩니다.(내부 PC의 IP를 공유기의 외부 IP로 변환하는이유는 NAT에 대해서 찾아보시면 좋을 것 같아요.)\n> 3. 이때 패킷에는 목적지 IP가 담겨 있는데 이 목적지 IP를 활용하여 라우터들이 계속 경로 설정을 하여 123.122.111.100이라는 서버에 도달할 수 있게 해줍니다.\n\n\n이렇게 간략하게 IP를 통해 네트워크에서 서버와 클라이언트가 어떤식으로 서로 통신하는지에 대해서 알 수 있었는데요. 여기서 중요한 것은 2번에 나왔던 **패킷**입니다. 네트워크에서 말하는 패킷은 **컴퓨터 네트워크에서 전달하는 데이터의 형식화된 블록**입니다. 즉 클라이언트인 192.168.0.100 PC에서 웹 서버인 123.122.111.100 서버로 웹 페이지를 요청할 때 페이지를 받아오는 과정, 요청하는 과정 등 서로 통신을 해야 하고 이 통신에 송신, 수신되는 데이터가 바로 패킷이라고 볼 수 있습니다.\n\n#### 3way Handshake\n지금까지 IP를 통해 통신할 때는 패킷을 이용하여 데이터를 송, 수신받는다고 했습니다. 근데 이 통신을 하기 위해서 그냥 패킷을 보내고 받으면 끝이 아닐까? 생각이 들 수도 있겠지만 실제로는 3way Handshake라는 과정을 통해 먼저 클라이언트와 서버가 연결되어있는지 확인하는 과정이 있습니다.\n\n![Alt text](image-4.png)\n\n**[출처 geeksforgeeks]**\n\n**3way handshake과정**\n\n> 1. SYN : 클라이언트가 서버와의 연결을 위해 SYN이라는 플래그를 보내어 연결 요청을 보냅니다.\n> 2. SYN/ACK : 서버가 클라이언트의 연결 요청을 받아 연결할 수 있다고 판단되면 SYN/ACK 플래그를 클라이언트에게 보내줍니다.\n> 3. ACK : 클라이언트는 서버의 응답을 확인하고 둘 다 실제 데이터 전송을 시작할 안정적인 연결을 설정합니다.\n\n다시 정리해보면 클라이언트에서 서버로 접속할 때 IP를 이용하여 통신을 하는데 그때 패킷을 통해 데이터를 전송하게 되고 통신을 연결하기 전 3way Handshake를 통해 연결 요청을 확인할 수 있다고 볼 수 있습니다. 이때 3way Handshake도 클라이언트가 SYN 패킷을 서버로 보내고, 서버가 SYN/ACK 패킷을 날리며 3way Handshake도 결국 패킷을 이용한 통신 중에 하나로 볼 수 있습니다.\n\n![Alt text](image-5.png)\n\n그럼 **통신을 위해 가장 먼저 발생하는 것이 SYN 패킷**인 거고 저희는 이 **SYN 패킷을 추적**한다면 서버 접속이 안 되고 있는 구간을 알 수 있지 않을까요?\n\n#### tcpdump\n저희는 클라이언트에서 서버로 요청하는 SYN 패킷을 가로채서 확인하기 위해 **tcpdump라는 소프트웨어**를 사용할 겁니다. tcpdump는 네트워크에서 전송되는 패킷을 가로채서 표시할 수 있게 해주는 소프트웨어로 대부분의 유닉스 계열 운영 체제에서 사용 가능합니다. 윈도우에서는 **wireshark**라는 프로그램을 이용할 수 있으며 현재 진행되는 과정들은 tcpdump를 지원하는 유닉스 계열 운영 체제에 해당합니다. 설치를 제외한 나머지 과정은 MacOS에서 진행되며 대다수의 유닉스 계열에 네트워크 관련된 인터페이스가 설치되어있는 경우 tcpdump가 깔린 경우가 많습니다.\n\n**설치**\n``` linux\n// Ubuntu 기준(다른 리눅스 계열도 비슷한 방식으로 설치합니다.)\n# apt install tcpdump\n```\n\n**네트워크 인터페이스 조회**\n\n노트북을 기준으로 생각해보았을 때 노트북은 무선, 유선 2가지가 있고 이 2가지에 모두 IP를 할당받을 수 있습니다. 노트북에는 유선 랜카드, 무선 랜카드 2개의 랜카드가 있다고 볼 수 있으며 인터넷에 연결된 랜카드를 통해 패킷이 나가게 됩니다. 그럼 제 노트북을 기준으로 알아 보도록 하겠습니다. \n\n```\n# ifconfig\n```\n![Alt text](image-7.png)\n\nifconfig를 입력했을 때 가장 왼쪽위에 `:` 왼쪽에 쓰여 있는 것이 **네트워크 인터페이스(랜카드)의 이름**이며 여러 개가 나오는데 그 중 **inet이 입력되어있는 곳이 IP가 부여되어 사용**하고 있는 곳으로 볼 수 있습니다.(유선, 랜선 둘 다 사용하면 inet이 적혀있는 인터페이스가 2개 있을 수 있음!) 저는 en0이라는 네트워크 인터페이스명을 가지고 있고 192.168.1.84라는 IP를 가지고 있네요!\n\n**특정 네트워크 인터페이스에서 나가는 패킷 조회**\n```\n# tcpdump -nni en0\n```\n위에 적힌 명령어는 en0이라는 네트워크 인터페이스를 감시해서 실시간으로 출력하겠다는 뜻입니다.\n\n-  `-i` : 네트워크 인터페이스를 설정하는 옵션\n-  `-n` : 한 번의 n은 IP 주소를 이름으로 변환하지 않고 두 번의 n을 입력할 경우 IP와 포트를 이름으로 변환하지 않습니다.\n\n![Alt text](img1.png)\n\n실행하고 바로 취소를 눌러 캡처된 패킷입니다. 빨간색으로 표시된 부분을 보면 **제 노트북 무선 랜카드에 적혀있는 IP인 192.168.1.84번** `출발지`에서 **104.18.22.107 IP의 443포트인** `목적지`로 패킷이 나가고 있는 것을 볼 수 있습니다. 443포트는 https로 저는 현재 https로 되어있는 웹사이트를 접속해 있기 때문에 위와 같이 패킷이 나오게 되는 겁니다. 그 뒤에 Flags를 볼까요? 제가 자세히 말씀드리진 않았지만 SYN, ACK와 같은 플래그들이 더 있습니다. [.]은 ACK Flag로 봐도 무방하며 연결 후 통신이 이루어지고 있다고 보면 좋을 것 같아요. \n\n이렇게 `출발지` IP에서 `목적지` IP로 가는 패킷에 **Flag가 담겨**있으므로 어느 목적지 서버를 접속할 때 **출발지 네트워크 인터페이스에서 SYN 패킷이 목적지 IP로 날아가는지**, 그리고 서버에서도 동일하게 **서버의 인터페이스에서 클라이언트가 보낸 SYN 패킷이 들어오는지 확인해보면 연결 요청에 대해서 트러블 슈팅** 해볼 수 있지 않을까요? \n\n그럼  **정상 동작일 때와 비정상 동작일 때 각각을 어떻게 확인해볼 수 있고 어떤 차이**가 있는지 알아봅시다.\n\n### 예제\n\n#### 클라이언트에서 정상적으로 서버에 접속되는 경우\n\n![Alt text](image-8.png)\n\n- **클라이언트 PC** : 192.168.1.84\n- **MySQL 서버** : 180.224.180.78\n\n\n현재 저는 카페에 있고 카페 무선 와이파이로 받은 **클라이언트 PC IP는 192.168.1.84**이고 집에 테스트를 하기 위해 열어둔 **MySQL서버는 180.224.180.78번** 입니다. 제 노트북인 192.168.1.84에서 **MySQL Workbench로 집에 있는 180.224.180.78을 접속**해보겠습니다. 접속할 때는 아래와 같이 명령어를 통해 패킷을 캡처해보도록 하겠습니다.\n\n```\n# tcpdump -nni en0 port 33306\n```\n\n명령어에 port를 입력하는 경우 특정 포트를 선택해서 캡처할 수 있습니다.(집에 있는 MySQL서버는 테스트 용도로 3306 포트가 아닌 33306포트로 오픈되어있는 상태입니다.)\n\n\n**클라이언트에서 확인한 tcpdump**\n![Alt text](img2.png)\n\n위 사진은 클라이언트에서 캡처한 패킷인데 **192.168.1.84에서 180.224.180.78의 33306포트로 SYN패킷**이 나가는 것을 확인할 수 있습니다. 아래 <b>Flag [S.]</b>의 경우 **SYN/ACK**를 표현하는 뜻이며 그 아래 바로 <b>Flag [.]</b>이 나온 것을 보면 정상적으로 연결된 것을 확인해볼 수 있습니다. 그럼 반대편인 MySQL서버에서도 확인해볼까요?\n\n**서버 네트워크 인터페이스 확인**\n![Alt text](image-9.png)\n\n우선 MySQL 서버의 IP는 **172.17.0.4**이고 eth0이라는 네트워크 인터페이스를 이용하고 있습니다. 서버의 IP인 180.224.180.78도 외부 IP일 뿐 NAT가 적용되고 현재 도커로 돌린 MySQL이기 때문에 위와 같이 172.17.0.4로 나오게 됩니다. 출발지에서 보기에는 서버는 **180.224.180.78** IP를 가지고 있다고 봐주시면 될 것 같아요!\n\n\n\n**서버에서 확인한 tcpdump**\n```\n# tcpdump -nni eth0\n```\n![Alt text](img3.png)\n\n출발지 172.17.0.1에서 172.17.0.4의 3306포트로 SYN 패킷이 들어온 것을 보실 수 있습니다. 현재 출발지 IP가 카페 외부 IP인 39.115.214.146으로 나오지 않는 이유는 현재 제가 도커를 이용해서이고 33306포트가 아닌 3306으로 나오는 이유도 도커의 외부포트 내부포트를 변경해서입니다. \n\n현재 저 빨간색 패킷 부분은 결국 39.115.214.146이라는 제 노트북이 저의 집에 있는 서버인 180.224.180.78의 33306포트로 접근했다 라고 생각해주시면 될 것 같아요.\n\n**결국 클라이언트에서 서버로 접속되는 패킷이 정상적으로 SYN, SYN/ACK, ACK가 된 것을 확인할 수 있고 클라이언트와 서버에서 모두 패킷을 확인할 수 있었습니다.**\n\n#### 클라이언트에서 정상적으로 서버에 접속되지 않는 경우\n\n**1. 서버가 Down 되어있을 때**\n\n![Alt text](img4.png)\n\n**클라이언트에서 확인한 tcpdump**\n![Alt text](img5.png)\n\n**SEW는 SYN ECE CWR의 약자입니다.**\n- SYN은 새로운 연결을 시작한다는 이야기이고\n- ECE는 Explicit Congestion Notification이라는 TCP혼잡제어 기능을 사용할 수 있다고 알려주는 것입니다.\n- CWR(Congestion Window Reduced)은 슬라이딩윈도우의 윈도우 사이즈를 줄여달라는 뜻입니다.\n  \n결국 SEW도 **SYN의 일종으로 SYN**을 보냈으나 Flag가 <b>[S.]</b>가 아닌 <b>[R.]</b> **연결종료가** 나왔으므로 서버와 정상적으로 연결될 수 없는 것을 알 수 있습니다. **이때 클라이언트에서는 SYN을 보낸 게 확인되었기 때문에 SYN을 보낸 클라이언트에서는 전혀 접속하는 데 문제가 없는 것이고 서버 쪽이 문제 있을 수 있다라고 유추할 수 있게 됩니다.** \n\n**2. 서버 상단의 방화벽이 막고 있을 때**\n\n실제로 중요한 회사 서버들은 서버 앞단에 방화벽 같은 보안 장비를 두는 경우가 많습니다. 소프트웨어 단계에서의 방화벽도 있으며 하드웨어든 소프트웨어로 이루어져 있든 MySQL서버 앞단에서 33306으로 들어오는 **포트를 차단할 경우 외부에서는 내부에 있는 MySQL서버를 접속하지 못하는 거죠**. 제가 회사에 다니며 겪었던 가장 흔한 일 중의 하나였습니다.\n\n![Alt text](img6.png)\n\n그럼 192.168.1.84인 클라이언트에서 180.224.180.78 서버로 접속 요청을 시도해보겠습니다.\n\n**클라이언트에서 확인한 tcpdump**\n![Alt text](image-11.png)\n\n180.224.180.78로 계속 SYN 패킷을 날리고 있습니다. 위에서 서버가 다운되었을 때는 찾지 못해 [R.] Flag가 뜨며 바로 종료되었으나 현재 서버는 다운되지 않았지만, **방화벽에 의해 포트가 차단이 되어 SYN 패킷은 날아가지만 서버에서는 응답은 없는 현상이 발생**하는 것입니다. 그럼 MySQL서버는 다운되지 않았으니 클라이언트가 서버에 접속 요청을 보낼 때 서버에서 패킷을 한 번 캡처해볼까요?\n\n**서버에서 확인한 tcpdump**\n![Alt text](image-12.png)\n\n예상하셨겠지만 **아무런 패킷을 받을 수 없었습니다**. 서버 상단에 있는 방화벽에서 패킷을 막고 있기 때문에 방화벽을 통과할 수 없어 이런 현상이 발생하고, 이처럼 클라이언트에서 나가는 것은 확인했는데 서버까지 안 들어온다고 하면 클라이언트에서 출발 이후 서버에게 도착하기전까지 어떤 장비나 소프트웨어에 의해 막혀있다고 판단할 수 있는 거죠. \n\n방화벽 차단뿐만 아니라 포트포워딩을 잘못 설정했을 때, AWS에서 보안 그룹 설정을 잘못했을 때 등 다양한 원인에 의해 발생할 수 있습니다. \n\n\n### 마지막으로\n\n클라이언트에서 서버로 접속이 안 되는 경우는 사실 어디가 잘못되었다고 쉽게 특정할 수는 없습니다. 정말 다양한 원인에 의해 발생할 수 있는 문제이지만 앞에서 말씀드린 것처럼 tcpdump를 이용한다면 네트워크 어느 구간에서 문제가 있는지 유추할 수 있어 시간을 절약할 수 있습니다.\n\n모든 분이 이해하기 쉽게 작성하기 위해 자세하게 적기보다는 어떠한 원리로 트러블 슈팅할 수 있는지에 초점을 맞춰서 글을 작성했습니다. tcpdump는 실제로 활용할 수 있는 방법이 많으므로 한 번 따로 공부해보시는 것도 추천해 드립니다!\n\n\n### 번외\n![Alt text](image-13.png)\n\nSpringBoot에서 JDBC를 사용하면 Hikari CP(커넥션 풀)를 이용하게 되는데 이때 값을 설정하지 않으면 디폴트 값으로 웹서버와 DB서버 사이에 풀을 10개 만들게 됩니다. 이것도 사실 데이터베이스와 웹서버가 네트워크 통신으로 이루어지기 때문에 위와 같이 패킷을 캡처해서 실제로 **10번의 요청을** 보내는지 알 수 있게 됩니다. 위 사진에서도 SEW 즉, SYN 패킷이 10번 날아간 것을 확인해볼 수 있습니다!\n\n\n긴 글 읽어주셔서 감사합니다. 🙏🙏🙏\n\n\n\n\n\n"},{"excerpt":"PRE팀 기간 :  　　　　 백엔드 데브코스 시작 그렇게 기다리고 기다렸던 데브코스가 시작되었습니다. 교육 받기를 기다리며 가장 걱정했었던 것은 데브코스에 온 친구들이 너무 잘하지 않을까? 라는 걱정이었습니다. 근데 정말 잘하더라구요. 이 내용에 대해서는 뒷쪽에서 얘기하도록 하겠습니다. 　　　　 1️⃣ Week OT를 진행하고 6명이 한 팀이되어 아이스브레이…","fields":{"slug":"/programmers_preteam/"},"frontmatter":{"date":"June 16, 2023","title":"📝 프로그래머스 백엔드 데브코스 4기 PRE팀 회고록","tags":["회고"]},"rawMarkdownBody":"\n![네이비팀 사진{\"originWidth\":940,\"originHeight\":843,\"style\":\"alignCenter\"}](image.png)\n\n**PRE팀 기간** : `23/06/01 ~ 23/06/15` 　　　　\n\n### 백엔드 데브코스 시작\n\n그렇게 기다리고 기다렸던 데브코스가 시작되었습니다. 교육 받기를 기다리며 **가장 걱정했었던 것**은 **데브코스에 온 친구들이 너무 잘하지 않을까?** 라는 걱정이었습니다. 근데 **정말 잘하더라구요**. 이 내용에 대해서는 뒷쪽에서 얘기하도록 하겠습니다. 　　　　\n\n#### 1️⃣ Week\n\nOT를 진행하고 6명이 한 팀이되어 아이스브레이킹을 진행했습니다! 아무래도 처음이라서 그런지 모두 어색어색했던 것 같아요. 그렇게 아이스브레이킹이 끝나고 공부할 수 있는 시간을 갖게됩니다. 제가 말씀드리는 이 공부할 수 있는 시간은 `코어타임`이라고 부르며 13시 ~ 19시동안 동료들이 같이 공부한다는 느낌을 받을 수 있도록 게더타운을 활용해 캠을 키고 공부하는 시간이었습니다. 학습의 경우 녹화된 강의를 수강하고 나머지 시간에는 자유롭게 복습하고, 하고싶은 공부를 하면 되더라구요.\n\n가장 놀랐던 점은 교육 커리큘럼외에 **많은 것을 할 수 있도록 시키는 것**이었습니다. 노션은 보여드릴 수 없지만 굉장히 많은 페이지가 있더라구요,,\n\n    1. 팀 스크럼 회의\n    2. 스터디 독려\n    3. 월마다 실시간 세션 2번 이상\n    4. 멘토, 서브멘토와 팀 미팅 주 1회\n    5. 코드리뷰 과제\n    6. 디자인 패턴 발표\n\n사실 이것 말고도 더 많다고 생각하는데 다 적기가 힘들어서,, 그리고 가장 좋은 점은 매니저님의 열정입니다. 교육생들에 대해 진심으로 생각해주시고 성장시키려고 많이 노력해주시는 모습이 짧은 2주기간동안 잘보였던 것 같아요. 　　　　\n\n#### 2️⃣ Week\n\n첫 주는 오리엔테이션과 아이스브레이킹하고 적응하느라 많은 것을 하진 못했던 것 같아요. 2주차부터는 팀원분들과 소통도 많이했었고 강의도 열심히 들었던 것 같아요! 2주차에는 자바 심화 Optional, Interface, Stream 을 배웠습니다! 그리고 2Week ~ 3Week 동안 과제가 주어지는데 생각보다 어려웠던 것 같아요. 사실 저는 자바를 기초만 알고 제대로 할 줄은 모르는 상태였거든요! 그렇게 열심히 프로그램을 만들어서 PR을 올렸습니다! 　　　　\n\n#### 3️⃣ Week\n\n3Week은 DB DML, DDL 그리고 Index와 관련된 것을 배웠습니다! 정보처리기사를 준비하며 많이 공부했었기 때문에 난이도가 높진 않았던 것 같아요! 그것보다 프로그램 만든거 PR올린거에 수 많은 리뷰가 달려서,, 리팩토링하는데 오랜시간을 투자했던 것 같아요. 객체지향과 자바의 컨벤션에 대한 개념이 없었어서 네이밍부터 컨벤션, 책임 분리 등 굉장히 많은 것을 고치면서 짧은 기간내에 성장한 느낌이 들었어요! 　　　　\n\n### 🌈 가장 좋았던점\n\n#### 1\\. **팀원분들의 실력이 굉장히 좋아서 배울 것이 많았습니다.**\n\n```\n - 저의 경우 팀원분들에 비해 좀 실력이 떨어진다고 생각이 많이 들었어요.\n - 스프링 부트로 프로젝트를 좀 하고 오신 분들도 많았었습니다.\n - 모르는 것을 시도 때도 없이 질문했지만 팀원분들께서 자세하게 알려주시려고 많이 노력해주셨습니다.\n```\n\n#### 2\\. **동료 성장이 초점입니다.**\n\n```\n - 앞에서도 얘기했지만 동료들에게 물어보고 얻을 수 있는 것이 굉장히 많습니다.\n - 팀원 뿐만이 아니라 스터디를 하면서, 또는 발표하는 것에 대해 질문을 하면서 굉장히 많은 것을 얻어갈 수 있습니다.\n```\n\n#### 3\\. **멘토님과 서브멘토님 두분이서 6명을 관리합니다.**\n\n```\n - 멘토님과 서브멘토님께서 직접 코드리뷰를 해주시고 최소 2번 이상 해주십니다.\n - 팀 미팅, 개인 미팅 뿐만 아니라 요청드릴 때마다 모든 질문에 진심을 다해서 대답해주세요!\n```\n\n#### 4\\. **세션 특강**\n\n```\n - 업계에서 유명하신 분들을 초청해주셔서 세션 특강을 진행합니다.\n - 짧은 시간이어도 생각보다 되게 배울게 많다고 느껴지고 좀 더 불타오르는 것 같아요!\n```\n\n#### 5\\. **스펜서 매니저님**\n\n```\n - 다른 교육과 가장 차별화된 점이라고 생각하는데 매니저님께서 모든 교육생이 성장하는데 진심이십니다.\n - 면접에서 본인이 합격한 이유에 대해서 자세하게 알고 계시며 모든 것을 기록해두세요!\n - 찾아보면 매니저님께서 직접 쓰신 글을 읽어볼 수 있는데 정말 생각이 깊으시고 진심이라는 것을 느낄 수 있습니다!\n```\n\n\n사실 이것 말고도 좋은 점이 너무 많아서 다 담기가 어려운 것 같아요. 가장 좋았던 점에서 하나만 뽑자면 **동료 성장**인 것 같아요. 서로 모르는 것을 물어보고 알아가며 소통과 성장을 배울 수 있는 기회? 기술적으로 잘하는 것도 중요하지만 무엇보다 소통이 가장 중요하다고 생각합니다! 기술뿐만 아니라 커뮤니케이션을 배울 수 있는 곳이기도 해서 너무 만족하고 있습니다! 그리고 무엇보다 우리 PRE팀의 팀원들 제가 제일 고맙고,, 아끼는 나의 PRE팀 팀원들 항상 고맙습니다!! 👍👍👍"},{"excerpt":"🏫 학부 생활 합격 후기를 작성하기 전 곰곰히 생각해보니 학부 얘기를 해야할 것 같아서 꺼내보려고 합니다. 저는 1학년부터 학부 근로장학생으로 일하며 3학년까지 쉴틈없이 학업과 일을 병행하며 지내왔습니다! 주 5일중 3일 정도는 오전 9시부터 오후 10시까지 학교에 있을정도로요! 그렇게 4학년이 되서는 야간으로 학사과정을 했었고 주간에는 컴퓨터공학부 교직…","fields":{"slug":"/programmers_apply/"},"frontmatter":{"date":"June 07, 2023","title":"🎉 프로그래머스 백엔드 데브코스 4기 합격 후기","tags":["합격후기"]},"rawMarkdownBody":"\n![백엔드 데브코스{\"originWidth\":1360,\"originHeight\":880,\"style\":\"alignCenter\"}](image.png)\n\n## 🏫 학부 생활\n\n합격 후기를 작성하기 전 곰곰히 생각해보니 학부 얘기를 해야할 것 같아서 꺼내보려고 합니다. 저는 1학년부터 학부 근로장학생으로 일하며 3학년까지 쉴틈없이 학업과 일을 병행하며 지내왔습니다! 주 5일중 3일 정도는 오전 9시부터 오후 10시까지 학교에 있을정도로요! 그렇게 4학년이 되서는 야간으로 학사과정을 했었고 주간에는 컴퓨터공학부 교직원으로 근무했었습니다. 4학년 때는 일찍가서 늦게 집에가는 날이 주 3일이 5일이 되었고 졸업할 때 쯤 많이 지쳐있었던 것 같아요.\n\n위에서 이야기 한 것 처럼 학업과 일을 병행한다는게 쉽지 않았던 것 같아요. 집안 형편상 용돈을 받으며 다닐 수 없었고 그만큼 공부에 집중하지 못하고 일을 많이 했었던 것 같아요. 물론 이것도 핑계라고 하면 핑계라고 할 수 있겠지만요 😅 그래서 항상 공부에 집중을 못하는 것에 대한 아쉬움이 많이 남아있었습니다. 그렇다고 열심히 안한거는 아니에요! 전공동아리에서 회장도 해보고, 전공튜터링을 하며 후배들도 가르쳐보고, 여러 프로젝트를 해보며 한국전자전에 작품을 출시해보기도하고, 상도 받고, 차석으로 졸업해보기도 했답니다!\n\n**왜 이런 이야기를 하냐구요?**  \n바로 위에 이야기한 것들이 데브코스에 지원하게되는 계기가 되기도 했습니다. 항상 성적을 받기 위한 공부만을 했을 뿐 개발에 대해 진심으로 공부했다고 말할 수 없었습니다. 그런 생각들이 들면서 한 곳에 집중해서 성장하고 싶다는 생각이 컸던 것 같아요.\n\n## 🎓 졸업 후 취업 준비\n\n그렇게 졸업을 하고 취업을 준비하게 됩니다. 학교에서는 나름 열심히 했다고 생각했던 저는 자만심에 **'나 정도면 어느정도 취업할 수 있겠지!'** 라고 생각했던 것 같아요. 원티드, 프로그래머스, 잡플래닛, 잡코리아 등 다양한 채용 플랫폼에서 70개 정도의 회사에 서류를 제출했고 돌아오는건 서류 탈락 뿐이었습니다. 계속되는 서류 탈락 속에서 두 곳에서 과제, 코딩테스트를 보겠다고 연락이 왔었습니다.\n\n첫번째, 과제를 본 곳의 경우 난이도가 엄청 어렵다고 생각이 들진 않았지만 스스로 풀기는 어려워서 인터넷을 조금 참고해서 전부 다 풀었던 것 같아요. 물론 해당 회사에서도 인터넷을 참고해서 풀라고 안내해주셨었습니다! 몇일을 기다리고 `불합격` 소식을 들을 수 있었습니다. 나름 잘 풀었다고 생각했었는데 지금 생각해보니 많은 것을 고려하지 못했던 것 같았고 언어 컨벤션에 대한 것도 많이 부족했던 것 같아요.\n\n두번째, 코딩테스트를 본 곳이었습니다. 다른 곳과는 다르게 알고리즘 문제가 아닌 DB설계와 클래스다이어그램 같은 것들이 나왔었고 생각치도 못한 것들이 나와서 시간에 쫓겨 다급하게 풀었던 것 같습니다. 다행히 시간내로 전부 다 작성할 수 있었고 제출 후 몇일이 지나고 `합격소식`에 면접을 볼 수 있는 기회가 찾아왔습니다.\n\n제가 데브코스에 지원하게 된 가장 큰 이유가 이 기술면접이었습니다.\n\n기술면접에서 `자바스크립트의 동작원리`, `싱글톤이 무엇인지 설명해주세요` 와 같은 답이 명확하게 나오는 질문들을 준비했었지만 면접관님께서 질의해주신 내용은 명확한 답이 나오는 질문이 아닌 문제를 주고 스스로 생각해서 해결 할 수 있는 그러한 문제들을 내주셨던 것 같아요. 수학적인 지식들도 여쭤보셨었고 SNS DB를 설계해보고 설명해달라고도 하셨었습니다. 모든 문제들에 대해 해결하려고 노력했지만 제 스스로의 부족함을 느끼고 모든 문제에 대해 명확한 답을 할 수 없었습니다. 이때부터 저의 자만심은 굉장히 겸손해지게되었고 스스로 많이 부족한 것을 인정하고 다시 처음부터 제대로 시작해야겠다라고 마음을 먹게되었습니다.\n\n## ✉️ 지원 동기\n\n위에서 말했던 내용들을 정리하여 두가지로 말씀드리자면\n\n1.  학부생활동안 제대로 하지 못했던 개발 공부를 긴 시간동안 집중해서 하고싶었습니다.\n2.  취업준비 과정속에서 스스로의 부족함을 인정하니 공부할게 많아졌다고 느껴졌고 개발에 대해서 진심으로 생각하게 되어 지원하게되었습니다.\n\n## 📜 지원 절차\n\n### 지원서 작성\n\n1.  데브코스에 지원하게된 동기\n2.  데브코스와 별개로 원래는 어떤 계획을 갖고 있었나요?\n3.  왜 개발자가 되고 싶으신가요?\n4.  웹 백엔드 분야로 진출하고자 결심한 이유는 무엇인가요?\n5.  웹 백엔드 진로를 위해 그동안 노력해온 것이 있나요?\n6.  강도 높은 과정입니다. 데브코스에서 어떻게 학습을 이어갈 계획인가요?\n7.  현재 또는 과거에 타교육기관/부트캠프 경험이 있다면 기관/과정명/기간을 예시처럼 남겨주세요\n8.  Github을 통해 협업한 경험이 있나요? 확인 가능한 PullRequest URL이나 관련 Repository를 남겨주세요.\n9.  이전에도 백엔드를 학습 또는 프로젝트를 경험한 적이 있다면 들려주세요. 외부 링크가 존재하는 경우 첨부해주셔도 됩니다.\n10.  위의 항목에서 미처 답변하지 못했던 이야기(나의 장단점 등)를 자유롭게 이야기해주세요.\n\n생각보다 작성할 내용들이 굉장히 많았다고 생각했습니다. 여러가지 내용들을 작성하려다보니 글자수 제한보다 초과해서 작성하게되었고 저의 경우 어느정도 초과해서 냈었습니다.\n\n**💁‍♂️ 작성 TIP.**  \n분명 본인이 개발자가 되고싶다는 생각이 있었으면 본인의 히스토리가 있을 것이라고 생각됩니다. 없다고 하더라도 본인이 갑자기 개발을 하고싶기 때문에 데브코스를 지원했을 것이라고 생각합니다. 이러한 이유들을 솔직하게 적으시면 좋을 것 같아요. 저는 정말 모든 문항에 대해서 제 진심을 담았다고 생각합니다. 본인을 꾸미려하지 않고 최대한 내 인생을 얘기한다는 느낌으로요.\n\n### 코딩테스트\n\n-   객관식(HTML, CSS, WEB, JAVA, DB, SQL) 36문제\n    -   정말 골고루 나왔던 것 같습니다. JAVA도 기초적인 부분이지만 꼼꼼히 할 필요가 있다고 느껴졌습니다.\n    -   저의 경우 Javascript위주로 백엔드를 했기 때문에 JAVA 문제만 조금 헷갈리는게 많았고 나머지는 적당히 풀 수 있었던 것 같아요.\n-   SQL 코테 2문제\n    -   프로그래머스에 있는 SQL문제 다양하게 많이 있으니 어느정도 풀어보셨으면 다 맞을 수 있을 것이라고 생각합니다.\n-   Java 코테 2문제\n    -   한 문제는 레벨 1정도였고 다른 한 문제는 레벨 2~2.5 사이의 문제였던 것 같습니다.\n    -   저의 경우 두번째 문제는 풀지 못했지만 끝까지 포기하지 않고 열심히 코드를 적어가며 끝날때까지 고민했었습니다!\n\n코딩테스트의 난이도가 채용 관련 테스트보다는 훨씬 쉽다고 느껴졌지만 비전공자분들이나 웹에 대한 지식, 자바에 대한 지식이 없을 경우 조금 어렵게 느껴질 수도 있다고 생각이 들었습니다. 그에 맞게 잘 준비하시고 아무리 코테를 잘하시더라도 지원서가 별로이면 떨어질 수도 있다는 글을 어디서 본 것 같아요. 지원서도 꼼꼼히 잘 작성해야될 것 같습니다.\n\n![코테 합격 {\"originWidth\":1318,\"originHeight\":678,\"style\":\"alignCenter\"}](image-1.png)\n\n### 면접\n\n면접의 경우 경험과 지원 동기 위주의 대화 형식으로 일대다 형식의 면접이었습니다. 면접관 한 분에 저 포함 지원자 3명에서 보았습니다! 저의 경우 면접을 보기전까지 그동안의 삶을 돌아보면서 저에 대한 내용들을 작성해보며 암기보다는 옛날 생각들을 끌어내려고 노력했던 것 같아요. 질문지를 작성해보고 답도 많이 적어보았지만 실제 면접에서 해당 내용들이 나오지는 않았었습니다. 그래도 미리 작성해보고 많은 저의 경험들을 머릿속에 다시 넣어둘 수 있어서 좋은 방법이었던 것 같습니다.\n\n한가지 더 추가로 말씀드리고 싶은건 기술 질문들도 적지 않았다는 것입니다. 이것도 깊은 CS 지식은 아니지만 어느정도 웹과 자바에 대해 알고 있어야 대답할 수 있는 질문들이었습니다!\n\n## 🎉 합격\n\n![최종 합격{\"originWidth\":1076,\"originHeight\":694,\"style\":\"alignCenter\"}](image-2.png)\n\n그전까지 취업준비를 하며 계속되는 서류 탈락, 면접 탈락으로 인해 자존감도 많이 떨어져서 이 과정도 떨어질 것이라 생각했지만 많은 친구들과 지인분들이 분명 합격할거라고 용기를 주셨습니다. 그 결과! 합격할 수 있게 되었어요. 앞으로 5개월 정도의 긴 시간동안 공부에 집중하며 많은 성장을 이뤄내보려고 합니다. 이 과정을 생각하시는분들도 이 글을 보고 꼭 도움을 얻을 수 있으면 좋겠습니다.\n\n긴 글 읽어주셔서 감사드립니다 😆\n\n궁금하신 사항은 이메일로 연락주시면 답변 가능한 선에서 답변드리도록 하겠습니다."},{"excerpt":"취업 공고를 이것저것 보다가 JOBDA라는 채용 플랫폼에서 스펙과 전공 무관하게 개발자 역량검사와 개발자 구현 능력 검사를 통해 회사를 매칭해 준다는 글을 보고 취업준비를 하는 저에게 어느 정도 도움이 될 것 같아서 신청 후 검사해보았습니다! 여기에서 얘기하는 것을 간단하게 설명드리면 스펙과 전공을 보지 않고 해당 플랫폼에서 제공하는 개발자 역량검사와 개…","fields":{"slug":"/jobda_decharms/"},"frontmatter":{"date":"April 07, 2023","title":"JOBDA 디챔스 개발자 역량검사와 개발자 구현 능력 검사 후기","tags":["후기"]},"rawMarkdownBody":"\n\n![잡다{\"originWidth\":740,\"originHeight\":418,\"style\":\"alignCenter\"}](image.png)\n\n취업 공고를 이것저것 보다가 JOBDA라는 채용 플랫폼에서 스펙과 전공 무관하게 개발자 역량검사와 개발자 구현 능력 검사를 통해 회사를 매칭해 준다는 글을 보고 취업준비를 하는 저에게 어느 정도 도움이 될 것 같아서 신청 후 검사해보았습니다!\n\n여기에서 얘기하는 것을 간단하게 설명드리면 스펙과 전공을 보지 않고 해당 플랫폼에서 제공하는 **개발자 역량검사와 개발자 구현 능력 검사** 이 2가지 만을 보고 점수가 높을수록 더 많은 기업 추천을 해주는 시스템 같았습니다.\n\n기간은 **4/16(일) 23:30분까지**이니 관심 있으신 분들은 해보시는 것도 좋을 것 같아요!\n\n**\\[관련 사이트\\]**\n[JOBDA 디챔스](https://www.jobda.im/position/2251/jd \"잡다 디챔스\")\n\n\n### **개발자 AI 역량검사**\n\n#### **1\\. 성향파악**\n\n신속하게 본인과 가까운 성향을 선택하는 것이었습니다. \n약간 인성 검사, 성격 유형 검사 같은 건데 굉장히 빠른 시간 내에 본인에 알맞은 것을 선택해야했습니다.\n\n#### **2\\. 전략게임**\n\n가위바위보, 대중교통 연결하기, 고양이 찾기 등 다양한 게임이 있는데 별거 아니라 생각했지만 생각보다 힘들었던 것 같아요! 모든 전략게임들이 빠른 시간 내에 해결해야 하는 문제이다 보니 시간에 엄청 쫓기게 되는데 그 시간 동안 엄청난 집중을 해야 해서 더 힘들었던 것 같습니다. 모든 게임은 시작 전 체험이 가능하니 사이트에서 직접 체험해 보고 연습한 다음 진행하는 것이 고득점을 맞는데 도움이 될 것 같아요!\n\n#### **3\\. 영상면접**\n\n처음에 호기심으로 시작하다 보니 뭐가 있는지도 모르고 검사를 눌러서 마지막을 보니 영상면접이 있었습니다. 영상면접이라는 단어를 보고 \"아 망했다. 준비한게 없는데 어떻게 하지?\"라고 생각이 들더라구요. 영상면접은 프로그램에서 질문을 주면 30초 동안 시간을 주고 나머지 주어진 시간 동안 대답을 하는 면접이었습니다. 실제 면접관이 있는 것이 아니기 때문에 조금 더 편하게 할 수 있었는데 아무래도 준비하지 않고 해서 그런지 대답은 자연스럽게 했어도 내용의 질이 많이 떨어졌던 것 같습니다.\n\n이렇게 3가지에 대해서 검사하고 약 40분 정도 소요되었습니다.\n검사 결과는 길면 하루 뒤에 나온다고 하는데 저는 1~2시간 뒤에 나왔습니다!!\n\n![잡다1{\"originWidth\":986,\"originHeight\":894,\"style\":\"alignCenter\",\"filename\":\"스크린샷 2023-04-09 오후 1.36.38.png\"}](image-1.png)\n\n검사 결과는 Very Good! 조금 걱정했는데 생각보다 잘 나온 것 같아서 다행인 것 같아요 ㅎㅎ!!\n\n\n### **개발 구현 능력 검사**\n\n개발 구현 능력 검사는 일반 코딩테스트랑 비슷하나 살짝 달랐습니다. Basic, Intermediate, Advanced 3가지로 나뉘는데 처음 검사하는 경우 Basic이랑 Intermediate 2개 중에서 선택해서 검사할 수 있었습니다. 저는 처음이니 Intermediate를 시험 보았고 문제는 밝힐 수 없으나 문제가 점점 확장되는 방식이었습니다. 1시간 30분 동안 3문제를 푸는데 마지막 문제에서 시간이 부족해서 다 풀지는 못했어요. 분명 풀 수 있는 문제 같았는데 그 전 두 번째 문제에서 실수를 해서 20분을 낭비해서 너무 아쉬웠습니다. 그리고 개발 구현 능력 검사는 바로 결과가 나와요!\n\n![잡다3{\"originWidth\":902,\"originHeight\":687,\"style\":\"alignCenter\",\"filename\":\"스크린샷 2023-04-09 오후 1.47.47.png\"}](image-2.png)\n\n시험 결과는 걱정했던거와 달리 Intermediate에서 제일 높은 등급인 High 등급을 받았습니다! 지금까지 코테 문제를 꾸준히 연습하면서 실력이 좋아지고 있는 게 맞는가 싶었는데 정확한 판단법은 아니지만 조금은 나아졌다는 것을 증명할 수 있는 자료 같아서 기분이 좋았습니다. 다음 주 토요일에도 있는데 시간이 난다면 Advanced도 다시 한번 검사해 보려구요!\n\n이 시험을 다 치르고 보니 고등학교 졸업 후 바로 대기업에 취직했을 때 인적성 검사를 보던 게 기억이 났습니다. 비슷한 느낌인데 확실히 기술이 발전하니 이렇게 AI로도 전부 다 처리할 수 있다는 게 너무너무 신기했습니다. 신입으로 개발자를 지원하시는 분들이라면 실력 테스트 차원에서 해보는 것도 정말 좋은 기회가 될 것 같습니다!"}]}},"pageContext":{}},"staticQueryHashes":[],"slicesMap":{}}